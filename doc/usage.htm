<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
	<title>Using Rextile</title>
    <style type="text/css" media="screen">
		
    </style>
	<link href="style_screen.css" rel="stylesheet" type="text/css" media="screen" /><link href="style_print.css" rel="stylesheet" type="text/css" media="print" />
</head>

<body>
    <div class="all">
		<div class="header">
		
<div class="nav crumbs">
	<a href="index.htm">Rextile</a> &gt; 
</div>


		</div>
        <div class="content">

<h1>Using Rextile</h1>


<div class="toc"><ul class="toc toc1"><li><a href="#pagetoc__1">Running Rextile</a></li><li class="withitems"><a href="#pagetoc__2">How .rextile Files Are Processed</a><ul class="toc toc2"><li><a href="#pagetoc__2_1">Textile Processing</a></li><li><a href="#pagetoc__2_2"><span class="caps">XHTML</span> Processing</a></li><li><a href="#pagetoc__2_3"><span class="caps">XHTML</span> Script Node Processing</a></li></ul></li><li><a href="#ooop">Out-of-order Processing</a></li><li><a href="#pagetoc__4">File Lookup</a></li><li class="withitems"><a href="#pagetoc__5">Sample Wrapper Files</a><ul class="toc toc2"><li><a href="#pagetoc__5_1">_wrapper.rextinc</a></li><li><a href="#pagetoc__5_2">_wrapper.xhtml</a></li></ul></li></ul></div>

	<h2><a name="pagetoc__1">Running Rextile</a></h2>


	<p>Rextile is an offline site-construction tool that works on files and folders. Running it is very simple. Just change to your site&#8217;s root folder and issue:</p>


	<pre><code>ruby /path/to/rextile/run.rb</code></pre>


	<p>Here&#8217;s what this does:</p>


	<ul>
	<li>Read and eval <code>_site.rb</code>. This is where you set global options like <code>@template_path</code>.</li>
	</ul>


	<ul>
	<li>Read all files ending in <code>.rextile</code> in the current folder and its subfolders. Process each one and write out the resulting <code>.htm</code> file (output path and name can be changed), unless it is still the same as before.</li>
	</ul>


	<h2><a name="pagetoc__2">How .rextile Files Are Processed</a></h2>


	<p>For each <code>.rextile</code> file, Rextile processes first the <a href="http://www.textism.com/tools/textile/">Textile</a> form, then the <span class="caps">XHTML</span> form.</p>


	<h3><a name="pagetoc__2_1">Textile Processing</a></h3>


	<ul>
	<li>Set <code>@html_name</code> to the name of of text <code>.rextile</code> file, but with the extension changed to <code>.htm</code>.</li>
	</ul>


	<ul>
	<li>Read the file into a string called <code>rextile</code>.</li>
	</ul>


	<ul>
	<li>Look for a file called <code>_wrapper.rextinc</code> (file lookup rules are listed below).</li>
	</ul>


	<ul>
	<li>If found, replace <code>rextile</code> with the contents of the wrapper file, but substitute the sequence <code>CONTENT GOES HERE</code> by the former contents of <code>rextile</code>.</li>
	</ul>


	<ul>
	<li>Run <a href="http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/">erb</a> on the string <code>rextile</code>.</li>
	</ul>


	<ul>
	<li>Run <a href="http://whytheluckystiff.net/ruby/redcloth/">RedCloth</a> on the string <code>rextile</code>, returning a new string <code>html</code>.</li>
	</ul>


	<h3><a name="pagetoc__2_2"><span class="caps">XHTML</span> Processing</a></h3>


	<ul>
	<li>In the string <code>html</code>, convert all &lt;<code>§...§</code>&gt; sequences to <code>&lt;%...%&gt;</code> sequences.</li>
	</ul>


	<ul>
	<li>Look for a file called <code>_wrapper.xhtml</code> (file lookup rules are listed below).</li>
	</ul>


	<ul>
	<li>If found, replace <code>html</code> with the contents of the wrapper file, but substitute the sequence <code>CONTENT GOES HERE</code> by the former contents of <code>html</code>.</li>
	</ul>


	<ul>
	<li>Setup <code>@html_doc</code> as an <a href="hpricot">Hpricot</a> DOM tree of <code>html</code> as it stands so far.</li>
	</ul>


	<ul>
	<li>Run <a href="http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/">erb</a> on the string <code>html</code>.</li>
	</ul>


	<ul>
	<li>Setup <code>@html_doc</code> as an <a href="hpricot">Hpricot</a> DOM tree of <code>html</code> anew.</li>
	</ul>


	<ul>
	<li>Process all nodes in <code>html_doc</code> matching the <span class="caps">CSS</span> selector <code>pre.rscript</code>, as explained below.</li>
	</ul>


	<ul>
	<li>Convert the <span class="caps">DOM</span> back to <span class="caps">HTML</span> and write it to <code>@html_name</code>, unless the existing file already contains the very same <span class="caps">HTML</span>.</li>
	</ul>


	<h3><a name="pagetoc__2_3"><span class="caps">XHTML</span> Script Node Processing</a></h3>


	<ul>
	<li>Set <code>@html_script_node</code> to the node being processed.</li>
	</ul>


	<ul>
	<li>Evaluate the node&#8217;s text.</li>
	</ul>


	<ul>
	<li>Build a new <span class="caps">DOM</span> from the evaluation result, interpreted as a single-root <span class="caps">XHTML</span> snippet.</li>
	</ul>


	<ul>
	<li>Replace the node by the root of the new <span class="caps">DOM</span>.</li>
	</ul>


	<h2><a name="ooop">Out-of-order Processing</a></h2>


	<p>You can instruct Rextile to process a file during the processing of another file. This is handy when automatically building listings of other files in index pages, for example. To do this, just say <code>process 'my/path/myfile.rextile'</code> within an embedded <a href="scripting.htm">script</a>. Rextile maintains a list of files already processed so files don&#8217;t get processed twice.</p>


	<p>You can see this in action in the file <code>sample/articles/index.rb</code>.</p>


	<h2><a name="pagetoc__4">File Lookup</a></h2>


	<p>When Rextile looks for the wrapper files <code>_wrapper.rextinc</code> and <code>_wrapper.xhtml</code>, it uses the method <code>read_closest_file()</code> to do so. This method looks in the current <code>.rextile</code> file&#8217;s folder, and then in all its parent folders up to the site root. Finally, it looks in <code>template_path</code>. It returns the first matching file. This means you can override the files at every folder level of your site.</p>


	<p>The <a href="templates_standard.htm">standard template</a> also makes use of this method to find auxiliary files like, for example, <code>_init.rb</code>.</p>


	<p>There are two other, related methods, that concatenate all of the files, rather than just returning the first match. They are</p>


	<ul>
	<li><code>read_prepended_files()</code>     &#8211; adds files in outer folders first</li>
		<li><code>read_appended_files()</code> &#8211; adds files in outer folders last</li>
	</ul>


	<p>The <a href="templates_standard.htm">standard template</a> uses the former to read <code>_settings.rb</code>. This means that inner settings are evaluated last and thus have precendence.</p>


	<h2><a name="pagetoc__5">Sample Wrapper Files</a></h2>


	<h3><a name="pagetoc__5_1">_wrapper.rextinc</a></h3>


	<p>The Rextile wrapper file, if present, is used to define a common header and footer for every page. Rextile simply uses the wrapper file&#8217;s source and, within it, replaces the sequence <code>CONTENT GOES HERE</code> by the page&#8217;s source text. For example:</p>


<pre><code>p=. Header

CONTENT GOES HERE

p=. Footer
</code></pre>

	<p>More typical than this contrived example is putting a script block in the header part where you initialize custom instance variables and <code>require</code> global modules. Those can then be used in script blocks within the pages themselves, and in the <span class="caps">HTML</span> script blocks in <code>_wrapper.xhtml</code>. See the <a href="templates_standard.htm">standard template</a> for a more elaborate example.</p>


	<h3><a name="pagetoc__5_2">_wrapper.xhtml</a></h3>


	<p>The <span class="caps">XHTML</span> wrapper file, if present, defines the common <span class="caps">XHTML</span> header and footer for every page. Rextile simply uses the wrapper file&#8217;s source and, within it, replaces the sequence <code>CONTENT GOES HERE</code> by the body <span class="caps">XHTML</span> produced for the page. For example:</p>


<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" /&gt;
&lt;/head&gt;
&lt;body&gt;

CONTENT GOES HERE

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

	<p>Using <span class="caps">XHTML</span> script blocks of the form <code>&lt;%...%&gt;</code> here is very handy. See the <a href="templates_standard.htm">standard template</a> for a more elaborate example.</p>

		</div>
        <div class="footer">
		
<p>Copyright &copy; 2006 by Peter Arrenbrecht. All rights reserved.
<br />Last updated on Oct 26, 2006.</p>


        </div>
    </div>
</body>
</html>
